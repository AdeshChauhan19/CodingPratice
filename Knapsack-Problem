class Solution 
{
    //Function to return max value that can be put in knapsack of capacity W.
    
    knapSack(capacity, wt, val, n)
    { 
       // code here
       return this.findMaxProfit(capacity, wt, 0,val, n, {});
    }
    
    findMaxProfit(capacity=0, wt=[], currentItem=0,profit=[], n=0, memo) {
        if (currentItem == n) return 0;
        const currentWeight = wt[currentItem];
        const currentProfit = profit[currentItem]
        const currentKey = currentItem + '-' + capacity
        
        if (memo[currentKey]) return memo[currentKey];
        
        let consider=0;
        if (currentWeight <= capacity) {
            consider = currentProfit + this.findMaxProfit(capacity-currentWeight, wt, currentItem+1, profit, n, memo)
        }
        const notConsider = this.findMaxProfit(capacity, wt,  currentItem+1, profit, n, memo)
        
        memo[currentKey] = Math.max(consider, notConsider);
        return memo[currentKey]
    }
}
