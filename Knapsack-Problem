// { Driver Code Starts
//Initial Template for javascript
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function main() {
    let t = parseInt(readLine());
    for(let i=0;i<t;i++)
    {
        let input_line = readLine().split(' ');
        let n = parseInt(input_line[0]);
        
        input_line = readLine().split(' ');
        let W = parseInt(input_line[0]);
        
        input_line = readLine().split(' ');
        let val = new Array(n);
        for(let i=0;i<n;i++)
            val[i] = parseInt(input_line[i]);
        
        input_line = readLine().split(' ');
        let wt = new Array(n);
        for(let i=0;i<n;i++)
            wt[i] = parseInt(input_line[i]);
        
        
        let obj = new Solution();
        let ans = obj.knapSack(W, wt, val, n);
        if(ans==-0)
            ans=0;
        console.log(ans);
    }
}
// } Driver Code Ends


//User function Template for javascript


/**
 * @param {number} W
 * @param {number[]} wt
 * @param {number[]} val
 * @param {number} n
 * @returns {number}
*/

class Solution 
{
    //Function to return max value that can be put in knapsack of capacity W.
    
    knapSack(capacity, wt, val, n)
    { 
       // code here
       return this.findMaxProfit(capacity, wt, 0,val, n, {});
    }
    
    findMaxProfit(capacity=0, wt=[], currentItem=0,profit=[], n=0, memo={}) {
        if (currentItem == n) return 0;
        const currentWeight = wt[currentItem];
        const currentProfit = profit[currentItem]
        let currentKey = currentItem + '-' + capacity
        
        if (memo[currentKey]) return memo[currentKey];
        
        let consider=0;
        if (currentWeight <= capacity) {
            consider = currentProfit + this.findMaxProfit(capacity-currentWeight, wt, currentItem+1, profit, n)
        }
        const notConsider = this.findMaxProfit(capacity, wt,  currentItem+1, profit, n)
        
        memo[currentKey] = Math.max(consider, notConsider);
        return memo[currentKey]
    }
}

